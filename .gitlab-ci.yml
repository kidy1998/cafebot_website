# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - docker
  - deploy

variables:
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"

before_script:
    - export GRADLE_USER_HOME="$CI_PROJECT_DIR/.gradle"

cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/wrapper
      - .gradle/caches

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: openjdk:17-slim
  script:
    - echo "$APPLICATION_YML_BASE64" | base64 --decode > ./src/main/resources/application.yml
    - chmod +x gradlew
    - ./gradlew build -x test

docker_build:
    stage: docker
    image: docker:latest
    services:
        - docker:dind
    script:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker build -f Dockerfile -t "$DOCKER_USERNAME/cafebot:latest" .
        - docker push "$DOCKER_USERNAME/cafebot:latest"

deploy_job:
  stage: deploy
  image: appleboy/drone-ssh
  script:
    - apk add --no-cache openssh
    - ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts
    - ssh -i <(echo "$SERVER_SECRET") -o StrictHostKeyChecking=no "$SERVER_USERNAME@$SERVER_IP" << EOF
        docker stop backendc || true
        docker rm $(docker ps -a --filter "status=exited" -q) || true
        docker rmi $DOCKER_USERNAME/cafebot || true
        docker run -d --name backendc -p 8080:8080 $DOCKER_USERNAME/cafebot:latest
      EOF
